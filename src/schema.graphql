### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type Category {
  id: ID!
  name: String!
  slug: String!
}

input CategoryCreateInput {
  id: ID
  name: String!
  offer: OfferCreateOneWithoutOfferInput
  slug: String!
}

input CategoryCreateManyWithoutCategoriesInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutOfferInput!]
}

input CategoryCreateWithoutOfferInput {
  id: ID
  name: String!
  slug: String!
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
}

input CommentCreateManyWithoutCommentsInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutOfferInput!]
}

input CommentCreateOneWithoutCommentInput {
  connect: CommentWhereUniqueInput
  create: CommentCreateWithoutReplyInput
}

input CommentCreateWithoutOfferInput {
  author: UserCreateOneWithoutAuthorInput!
  body: String!
  createdAt: DateTime
  id: ID
  reply: ReplyCreateOneWithoutReplyInput
  updatedAt: DateTime
}

input CommentCreateWithoutReplyInput {
  author: UserCreateOneWithoutAuthorInput!
  body: String!
  createdAt: DateTime
  id: ID
  offer: OfferCreateOneWithoutOfferInput!
  updatedAt: DateTime
}

input CommentWhereUniqueInput {
  id: ID
}

"""DateTime"""
scalar DateTime

enum GENDERS {
  FEMALE
  MALE
  OTHER
}

input LocationCreateManyWithoutLocationInput {
  connect: [LocationWhereUniqueInput!]
  create: [LocationCreateWithoutOfferInput!]
}

input LocationCreateWithoutOfferInput {
  id: ID
  name: String!
  slug: String!
}

input LocationWhereUniqueInput {
  id: ID
  slug: String
}

type Mutation {
  createOffer(description: String!, discountPercentage: Float, discountprice: Float, gallery: OfferCreategalleryInput, price: Float!, thumbnail: String, title: String!, url: String): Offer!
  createOneCategory(data: CategoryCreateInput!): Category!
  login(email: String!, password: String!): AuthPayload!
  signup(email: String, gender: GENDERS, name: String, password: String, phoneNumber: String, username: String): AuthPayload!
}

type Offer {
  author: User!
  contacts: [String!]!
  description: String!
  gallery: [String!]!
  id: ID!
  price: Float!
  promoCode: String
  tags: [String!]!
  thumbnail: String
  title: String!
  url: String
}

input OfferCreatecontactsInput {
  set: [String!]
}

input OfferCreategalleryInput {
  set: [String!]
}

input OfferCreateManyWithoutOffersInput {
  connect: [OfferWhereUniqueInput!]
  create: [OfferCreateWithoutAuthorInput!]
}

input OfferCreateOneWithoutOfferInput {
  connect: OfferWhereUniqueInput
  create: OfferCreateWithoutReviewsInput
}

input OfferCreatetagsInput {
  set: [String!]
}

input OfferCreateWithoutAuthorInput {
  categories: CategoryCreateManyWithoutCategoriesInput
  comments: CommentCreateManyWithoutCommentsInput
  contacts: OfferCreatecontactsInput
  createdAt: DateTime
  description: String!
  discountPercentage: Float
  discountprice: Float
  gallery: OfferCreategalleryInput
  id: ID
  location: LocationCreateManyWithoutLocationInput
  price: Float!
  promoCode: String
  reviews: ReviewCreateManyWithoutReviewsInput
  tags: OfferCreatetagsInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  url: String
}

input OfferCreateWithoutReviewsInput {
  author: UserCreateOneWithoutAuthorInput!
  categories: CategoryCreateManyWithoutCategoriesInput
  comments: CommentCreateManyWithoutCommentsInput
  contacts: OfferCreatecontactsInput
  createdAt: DateTime
  description: String!
  discountPercentage: Float
  discountprice: Float
  gallery: OfferCreategalleryInput
  id: ID
  location: LocationCreateManyWithoutLocationInput
  price: Float!
  promoCode: String
  tags: OfferCreatetagsInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  url: String
}

input OfferWhereUniqueInput {
  id: ID
}

enum PERMISSIONS {
  ADMIN
  BOOKMARK_OFFER
  CREATE_CATEGORY
  CREATE_COMMENT
  CREATE_OFFER
  CREATE_REPLY
  CREATE_REVIEW
  DELETE_CATEGORY
  DELETE_COMMENT
  DELETE_OFFER
  DELETE_PROFILE
  DELETE_REPLY
  DELETE_REVIEW
  DISLIKE_OFFER
  LIKE_OFFER
  UPDATE_CATEGORY
  UPDATE_COMMENT
  UPDATE_OFFER
  UPDATE_PROFILE
  UPDATE_REPLY
  UPDATE_REVIEW
}

type Query {
  me: User!
  offers: [Offer!]!
}

input ReplyCreateManyWithoutRepliesInput {
  connect: [ReplyWhereUniqueInput!]
  create: [ReplyCreateWithoutAuthorInput!]
}

input ReplyCreateOneWithoutReplyInput {
  connect: ReplyWhereUniqueInput
  create: ReplyCreateWithoutCommentInput
}

input ReplyCreateWithoutAuthorInput {
  body: String!
  comment: CommentCreateOneWithoutCommentInput!
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input ReplyCreateWithoutCommentInput {
  author: UserCreateOneWithoutAuthorInput!
  body: String!
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input ReplyWhereUniqueInput {
  id: ID
}

input ReviewCreateManyWithoutReviewsInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutAuthorInput!]
}

input ReviewCreateWithoutAuthorInput {
  body: String!
  createdAt: DateTime
  id: ID
  offer: OfferCreateOneWithoutOfferInput!
  rating: Int!
  updatedAt: DateTime
}

input ReviewWhereUniqueInput {
  id: ID
}

type User {
  email: String!
  gender: GENDERS!
  id: ID!
  name: String!
  offers(after: String, before: String, first: Int, last: Int, skip: Int): [Offer!]
  permissions: [PERMISSIONS!]!
  phoneNumber: String!
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreatepermissionsInput {
  set: [PERMISSIONS!]
}

input UserCreateWithoutCommentsInput {
  bio: String
  email: String!
  emailVarificationToken: String
  gender: GENDERS!
  id: ID
  location: String
  name: String!
  offers: OfferCreateManyWithoutOffersInput
  password: String!
  passwordResetToken: String
  passwordResetTokenExpiration: String
  permissions: UserCreatepermissionsInput
  phoneNumber: String!
  profileCover: String
  profilePhoto: String
  replies: ReplyCreateManyWithoutRepliesInput
  reviews: ReviewCreateManyWithoutReviewsInput
  username: String!
}

input UserWhereUniqueInput {
  email: String
  id: ID
  username: String
}
